// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Extend extends ethereum.Event {
  get params(): Extend__Params {
    return new Extend__Params(this);
  }
}

export class Extend__Params {
  _event: Extend;

  constructor(event: Extend) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get end(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Init extends ethereum.Event {
  get params(): Init__Params {
    return new Init__Params(this);
  }
}

export class Init__Params {
  _event: Init;

  constructor(event: Init) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Subscribe extends ethereum.Event {
  get params(): Subscribe__Params {
    return new Subscribe__Params(this);
  }
}

export class Subscribe__Params {
  _event: Subscribe;

  constructor(event: Subscribe) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get start(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get end(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unsubscribe extends ethereum.Event {
  get params(): Unsubscribe__Params {
    return new Unsubscribe__Params(this);
  }
}

export class Unsubscribe__Params {
  _event: Unsubscribe;

  constructor(event: Unsubscribe) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Subscriptions__subscriptionResultValue0Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get end(): BigInt {
    return this[1].toBigInt();
  }

  get rate(): BigInt {
    return this[2].toBigInt();
  }
}

export class Subscriptions extends ethereum.SmartContract {
  static bind(address: Address): Subscriptions {
    return new Subscriptions("Subscriptions", address);
  }

  epochBlocks(): BigInt {
    let result = super.call("epochBlocks", "epochBlocks():(uint64)", []);

    return result[0].toBigInt();
  }

  try_epochBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochBlocks", "epochBlocks():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subscription(user: Address): Subscriptions__subscriptionResultValue0Struct {
    let result = super.call(
      "subscription",
      "subscription(address):((uint64,uint64,uint128))",
      [ethereum.Value.fromAddress(user)]
    );

    return changetype<Subscriptions__subscriptionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_subscription(
    user: Address
  ): ethereum.CallResult<Subscriptions__subscriptionResultValue0Struct> {
    let result = super.tryCall(
      "subscription",
      "subscription(address):((uint64,uint64,uint128))",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Subscriptions__subscriptionResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get epochBlocks_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class ExtendCall extends ethereum.Call {
  get inputs(): ExtendCall__Inputs {
    return new ExtendCall__Inputs(this);
  }

  get outputs(): ExtendCall__Outputs {
    return new ExtendCall__Outputs(this);
  }
}

export class ExtendCall__Inputs {
  _call: ExtendCall;

  constructor(call: ExtendCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get end(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExtendCall__Outputs {
  _call: ExtendCall;

  constructor(call: ExtendCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get start(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class UnsubscribeCall extends ethereum.Call {
  get inputs(): UnsubscribeCall__Inputs {
    return new UnsubscribeCall__Inputs(this);
  }

  get outputs(): UnsubscribeCall__Outputs {
    return new UnsubscribeCall__Outputs(this);
  }
}

export class UnsubscribeCall__Inputs {
  _call: UnsubscribeCall;

  constructor(call: UnsubscribeCall) {
    this._call = call;
  }
}

export class UnsubscribeCall__Outputs {
  _call: UnsubscribeCall;

  constructor(call: UnsubscribeCall) {
    this._call = call;
  }
}
